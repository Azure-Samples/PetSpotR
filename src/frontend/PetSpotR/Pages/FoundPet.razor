@using System
@using System.IO
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging
@using Dapr.Client
@using PetSpotR.Models
@inject ILogger<FoundPet> Logger
@inject IWebHostEnvironment Environment
@inject NavigationManager NavigationManager

<EditForm Model="@petModel" OnSubmit="@HandleSubmit" >
    <div class="form-container">
        <h2>Step 1: Tell us about the pet you found</h2>
        <div class="form-group row justify-content-center">
            <label for="petType" class="col-2 col-form-label">Pet Type</label>
            <div class="col-4">
                <InputSelect id="type" @bind-Value="petModel.Type">
                    <option>Dog</option>
                    <option>Cat</option>
                </InputSelect>
            </div>
        </div>
        <div class="form-group row justify-content-center">
            <label for="petBreed" class="col-2 col-form-label">Pet Breed (optional)</label>
            <div class="col-4">
                <InputText id="breed" @bind-Value="petModel.Breed" />
            </div>
        </div>
        <h2>Step 2: Upload an image of the pet you found</h2>
        <div class="form-group row justify-content-center">
            <div class="col-4">
                <label>
                    <InputFile OnChange="@SelectImages" accept=".png,.jpg,.jpeg" />
                </label>
            </div>
        </div>
        @if (isLoading)
        {
            <p>Uploading...</p>
        }
        <h2>Step 3: Submit lost pet for AI prediction</h2>
        <div class="form-group row">
            <div class="col-sm">
                <button type="submit" class="btn btn-primary btn-lg">Submit</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    private List<IBrowserFile> loadedImages = new();
    private long maxFileSize = 1024 * 1000;
    private int maxAllowedFiles = 1;
    private bool isLoading;

    private PetModel petModel = new();

    private async void HandleSubmit()
    {
        var uploadedFiles = new List<string>();
        Logger.LogInformation("Form submitted");

        // Process the form
        var daprClient = new DaprClientBuilder().Build();

        foreach (var image in loadedImages)
        {
            var stream = image.OpenReadStream(maxFileSize);

            MemoryStream ms = new MemoryStream();
            await stream.CopyToAsync(ms);

            var filename = $"{Guid.NewGuid().ToString()}{Path.GetExtension(image.Name)}";

            try
            {
                Logger.LogInformation("Uploading file: {Filename}", image.Name);
                await daprClient.InvokeBindingAsync(
                    bindingName: "images",
                    operation: "create",
                    data: ms.ToArray(),
                    metadata: new Dictionary<string, string>
                    {
                        { "contentType", image.ContentType },
                        { "blobName", filename }
                    }
                );
            }
            catch (Exception ex)
            {
                Logger.LogError("File: {Filename} Error: {Error}", image.Name, ex.Message);
            }

            try {
                // Logger.LogInformation("Publishing event");
                await daprClient.PublishEventAsync(
                    pubsubName: "pubsub",
                    topicName: "foundPet",
                    data: new Dictionary<string, string>
                    {
                        { "imagePath", filename },
                        { "type", petModel.Type },
                        { "breed", petModel.Breed }
                    }
                );
            } catch (Exception ex) {
                Logger.LogError("Error: {Error}", ex.InnerException);
                throw ex;
            }
        }

        NavigationManager.NavigateTo("/submit/found");
    }

    private void SelectImages(InputFileChangeEventArgs e)
    {
        isLoading = true;
        loadedImages.Clear();

        Logger.LogInformation("New images selected");

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {

            loadedImages.Add(file);
        }

        isLoading = false;
    }

}
